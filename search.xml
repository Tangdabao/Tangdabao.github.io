<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F12%2F17%2FBlueNRG-1%20MTU%E6%A8%A1%E5%BC%8F%2616%E4%BD%8DUUID%2F</url>
    <content type="text"><![CDATA[BlueNRG-1 MTU模式&amp;16位UUID基于STM32 BlueNRG-1的SDK -3.1.0&amp;nRF Connect 改用最大MTU，一次性调用接口可以收发247个字节，整个透传速率尽可能快而且不丢数据 一个收特征，一个发特征，UUID改用16位自定义UUID server uuid:0xfff0 TX uuid :0xfff1 TX value length 247 CHAR_PROP_NOTIFY RX UUID:0xfff2 RX value length 247 CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP 设计串口FIFO和发送FIFO 需要准确配置GATT属性表 实现方案 基于ST BlueNRG-1 SDK 3.1.0/BlueNRG-1_2 DK 3.1.0\Project\BLE_Examples\BLE_Chat 修改最大的MTU为247字节： 修改协议栈的最大容量 ：修改BlueNRG_Stack_Initialization(&amp;BlueNRG_Stack_Init_params);的成员 ​ 修改UUID为自定义ID 修改UART接收最大数据量]]></content>
  </entry>
  <entry>
    <title><![CDATA[IAR_Printf_Problem]]></title>
    <url>%2F2019%2F10%2F09%2FIAR-Printf-Problem%2F</url>
    <content type="text"><![CDATA[IAR 遇到的问题 问题：IAR 在使用Printf的时候，编译会出现报错，报错信息为： Error[Li005]: no definition for &quot;__lseek&quot; [referenced from xfspos.o(dl7M_tlf.a)] Error[Li005]: no definition for &quot;__close&quot; [referenced from fclose.o(dl7M_tlf.a)] Error[Li005]: no definition for &quot;remove&quot; [referenced from fclose.o(dl7M_tlf.a)] 解决办法： IAR 中 options中General Options选项的Library Configuration选项卡中将None换成Semihosted 造成原因： None表示不调用底层链接库，若选择Semihosted或IAR breakpoint复选框免责在应用程序调试过程中使用DLIB库提供的底层调试接口。]]></content>
      <tags>
        <tag>IAR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[stm32l0_StudyNote]]></title>
    <url>%2F2019%2F09%2F21%2Fstm32l0-StudyNote%2F</url>
    <content type="text"><![CDATA[STM32L0系列 - LPTIMLPTIM介绍 LPTIM是一个16位的定时器，可多个时钟源，可在所有电源模式下（除Standby模式下）可以保持运行状态，几遍没有内部时钟源，LPTIM已经可以运行。主要用于脉冲计数器、低功耗模式下唤醒、超时功能等。 LPTIM的主要特性 16位的递增计数器 3位预分频器，可以采用8种分频（1、2、4、8、16、32、64、128） 可选时钟源 内部时钟源：LSE、LSI、HSI16或者APB时钟 ULPTIM输入的外部时钟源（计数器使用） 16位的ARR自动重载寄存器 16位比较寄存器 连续、单次触发模式 可选软件、硬件输入触发 可编程的数字干扰滤波器 可 配置的输出：脉冲、PWM 可配置I/O的极性 编码器模式 LPTIM框图 LPTIM的工作模式LPTIM支持以下两种工作模式： 连续模式：定时器自由运行，由触发时间启动并且到禁止之后才会停止 单触发模式：定时器由触发时间启动，当达到ARR值的时候停止 LPTIME 的Timeout模式功能简介 用于Stop模式下计数器保持&amp;唤醒 代码介绍与初始化过程 12345678910111213141516171819202122232425262728293031323334353637383940414243444546/* ## - 1 - 系统时钟初始化############################################ */SystemClock_Config();/* ## - 2 - 设置LPTIM输入时钟源为HSI ############################################ */PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_HSI;HAL_RCCEx_PeriphCLKConfig(&amp;PeriphClkInit);/* ## - 3 - 设置LPTIM相关参数############################################ */hlptim1.Instance = LPTIM1;//选择LPTIMhlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;//选择时钟源hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;//设置分频系数hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;//设置触发源hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;//指定的输出电平hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;//更新模式：立即更新或者结束之后更新hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;//计数器源：内部或者外部HAL_LPTIM_Init(&amp;hlptim1);/* ## - 4 - 使能LPTIME 外设时钟############################################ */__HAL_RCC_LPTIM1_CLK_ENABLE();/* ## - 5 - 设置LPTIM中断优先级############################################ */HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);HAL_NVIC_EnableIRQ(LPTIM1_IRQn);/* ## - 6 - 添加中断服务函数############################################ */void LPTIM1_IRQHandler(void);/* ## - 7 - 开启Timeout中断############################################ *//** * @brief 设置TimeOut中断，任意的一个翻转事件会重启计数器 * @param LPTIME句柄 * @param 自动重装载值：当计数器Count累加到重装载值之后为0，自动重新装载（最大0Xffff） * @param Timeout计数器：当计数器累加到此值时，重启计数器 * 小于自动重装载值，小于0XFFFF * @retval 函数的成功与失败 * @callback HAL_LPTIM_CompareMatchCallback * @example 假设LPtim的时钟是HSI（16M），LPTIM进行128分频，那么FCount = 0.125Mhz = 125khz * 当 T =50000/125kHz = 之后重新加载，产生中断 ;当T= 12500 /125kHz之后，唤醒MCU * @Wakeup 以Period为周期，当Count小于Timeout时，继续低功耗；当Count大于Timeout时，退出低功 耗模式*/ HAL_LPTIM_TimeOut_Start_IT(&amp;hlptim1, 50000-1,//0.4s 12500-1);//0.1s/* ## - 8 - 编写callback函数############################################ */void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)&#123; printf("HAL_LPTIM_CompareMatchCallback\r\n"); S_LpTIM_Config.Counter = HAL_LPTIM_ReadCounter(&amp;hlptim1); S_LpTIM_Config.AutoReload = HAL_LPTIM_ReadAutoReload(&amp;hlptim1); S_LpTIM_Config.Compare = HAL_LPTIM_ReadCompare(&amp;hlptim1); HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);&#125; 参考代码地址]]></content>
      <tags>
        <tag>STM32L0</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test image]]></title>
    <url>%2F2019%2F09%2F18%2FTest-image%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[LSM6DSO_studyNote]]></title>
    <url>%2F2019%2F09%2F18%2FLSM6DSO-studyNote%2F</url>
    <content type="text"><![CDATA[ST LSM6DSO Study Note LSM6DSO的参数与特性 使用电压：1.71 -3.6V 温度范围：-40 to +85℃ 封装：LGA-14L（2.5mm3mm0.83mm） 接口：SPI、IIC FIFO：9kBytes 加速度计量程：2g/4g/8g/16g 陀螺仪量程：125/250/500/1000/2000 dps 特色功能：计步器、走路检测、计步 中断：跌落检测、wakeUp检测、6D/4D检测、单双击检测 LS6DSO Pin Description Pin Name Mode 1 Function 1 SDO/SAO 如果SPI模式，数据输出（SDO）。如果IIC模式，设置芯片地址（SA0） 2 SDx 连接到VDDIO或者GND，ST推荐连接到VDDIO 3 SCx 连接到VDDIO或者GND，ST推荐连接到VDDIO 4 INT1 可编程中断，IIC/SPI配置 5 VDDIO 为I/O供电的电源 6 GND 0 V supply 7 GND 0 V supply 8 VDD Power supply 9 INT2 可编程中断/数据使能（DEN） 10 OCS_Aux 悬空 11 SDO_Aux 连接到VDD_IO或者断开连接 12 CS 如果拉高：SPI被禁止、IIC使能；如果拉低：SPI使能，IIC禁止 13 SCL 时钟线 14 SDA 数据线 LSM6DSO Operating modes Accelerometer action &amp; Gyroscope in Power-Down or Sleep 陀螺仪运行，加速度在Powen-down模式 加速度计与陀螺仪都在ODR模式LSM6DSO初始化设置 设置模式 设置输出速率 设置量程 LSM6DSO 数据读取状态寄存器读取 STATUS_REG： TDA:Senser内温度数据准备好 GDA：Senser内陀螺仪的数据准备好 XLDA：Senser内加速度计数据准备好 中断读取中断分为两个可配置中断：INT1、INT2，两个中断都可以分别配置成不同的中断源，根据INT1_CTRL&amp;INT2_CTRL决定 INT1_CTRL: INT1_DRDY_G:陀螺仪数据中断 INT1_DRDY_xl：加速度数据中断 INT2_CTRL: INT2_DRDY_TEMP:温度数据中断 INT2_DRDY_G：陀螺仪数据中断 INT2_DRDY_xl：加速度数据中断 数据的读取： Senser Data = Output Data *Sensitivity（@FS） 数据读取寄存器： OUTX_H_A OUTX_L_A 等等数据计算步骤： 从传感器中读取三轴寄存器值 将2个字节的寄存器数据转换为有符号的16进制数值 有符号的16进制数据乘以相对的Sensitivity举个例子： LSM6DSO的ACC：量程为2G的情况下，Sensitivity = 0.061mg/LSB以下表格数据为量程2g状态下 Acceleration values OUTX_H_A (29h） OUTX_L_A (28h) 0g 00 00 350mg 16h 69h 1g 40h 09h -350mg E9h 97h -1g BFh F7h 350mg = 0x1669H*0.061 -350mg =0XE996h0.061 = 0x1669 0.061（因为是有符号的16进制，第一位如果为1那么数据为负数；16进制转换成10进制，取反加一即可或者使用WIN10自带的计算器，输入十六进制，点击Word即可）]]></content>
      <tags>
        <tag>Senser</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nRF Sniffer User Guide]]></title>
    <url>%2F2019%2F07%2F17%2FnRF_Sniffer_Um%2F</url>
    <content type="text"><![CDATA[nRF Sniffer抓包工具使用教程 本文主要讲述nRF Sniffer的安装与使用过程，主要参考了官方的使用指南nRF Sniffer概述 nRF sniffer 是一款调试和学习低功耗蓝牙的应用工具，是由专业的Noridc退出的软件&amp;硬件工具。 蓝牙抓包工具分为两种： 一种只能抓广播信息的Dongle，可以抓取广播包，37、38、39广播信道的信息，这种工具比较广泛Cy、ST、TI等大厂商都有推出 另外一种是能监听蓝牙通信信息的Dongle，在连接之前可以查看、连接之后也可以。这类工具有利于工程师熟悉协议栈，也有利于查看空中的数据。市面上主要的有TI、Noridc两家。 nRF Sniffer硬件介绍 nRF52840 DK nRF52 DK nRF51 DK nRF51 Dongle（52840的Dongle不支持抓连接包，只能监听一些简单的数据信息）nRF Sniffer 软件介绍： nRF Sniffer V1:支持51系列的开发板，不支持52系列 nRF Sniffer V2：支持51、52系列的开发板 nRF Sniffer安装过程：需要的硬件（以下任选其一） nRF51 Development Kit (PCA10028) v1.0 or later and a micro USB cable nRF51 Dongle (PCA10031) nRF52 Development Kit (PCA10040) and a micro USB cable 需要的软件 Window、OS x、Linux nRF Sniffer software V2.X Wireshark v2.4.2 Segger Jlink Python V2.7.X pyserial V3.4 安装过程 配置wireshark Help &gt; About Wireshark 打开 About wireshark 找到Extcap path文件夹，双击打开根目录 把下载好的nRF Sniffer 软件包解压，放在Extcap path文件夹内 安装python 并检查版本&gt; python --version 安装 pyserial pip install pyserial Segger Jlink 下载DK固件 打开Jlink.exe 写入以下指令 erase nRF51422_XXAC/nRF52832_XXAA S 1000 1loadfile &quot;D:\Software\nrfsniffer\hex\sniffer_pca10040_1c2a221.hex&quot;&gt;]]></content>
      <tags>
        <tag>nordic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nRF APP DownLoad]]></title>
    <url>%2F2019%2F07%2F17%2FnRF_App_Download%2F</url>
    <content type="text"><![CDATA[nRF芯片下载工具介绍 主要介绍几种下载方式，以及在使用过程中遇到的问题做一些记录DK Jlink固件更新有一些板子拿到手之后，Jlink的固件是丢失的，所以需要下载一下Jlink固件 如何进入Bootloader 模式： 按住板子上面的IF BOOT/RESET 上电 可以看到LD5是闪烁的（频率1s）、电脑上会多一个Boot的文件夹（注意，文件夹可能会消失，所以进入Boot模式之后，尽快下载） 如何更新Jlink固件： 官网下载Jlink的BIN文件：Interface MCU firmware 把下载好的bin文件拖到Boot文件夹内 Software、App下载： Jlink下载： erase nRF51422_XXAC/nRF52832_XXAA S 1000 loadfile &quot;D:\Software\nrfsniffer\hex\XXXX.hex&quot;&gt; nrfjprog.exe下载 在固件所在的文件夹 shift+右键，选择打开cmd.exe 敲入如下代码 nrfjprog.exe –eraseall -f NRF52 nrfjprog.exe –program XXX.hex –verify -f NRF52 nrfjprog.exe –reset -f NRF52 nRF connect下载 add app：Programmer Launch Programmer 左上角选择你的Device 右下角选择Read、Write]]></content>
      <tags>
        <tag>nordic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中文测试文件]]></title>
    <url>%2F2019%2F06%2F02%2F%E4%B8%AD%E6%96%87%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[中文测试这是一个中文测试文件]]></content>
  </entry>
  <entry>
    <title><![CDATA[STM32G0学习笔记]]></title>
    <url>%2F2019%2F01%2F24%2FSTM32G0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[STM32G0学习笔记 偶然机会得到一个STM32G0的开发板，现做一些笔记，仅个人保存所有]]></content>
      <tags>
        <tag>STM32G0</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown学习笔记]]></title>
    <url>%2F2018%2F12%2F23%2FMarkdown-Studydy-notes%2F</url>
    <content type="text"><![CDATA[基本用法 Markdown pad 2快捷键 加粗 Ctrl + B 斜体 Ctrl + I 引用 Ctrl + Q 插入链接 Ctrl + L 插入代码 Ctrl + K 插入图片 Ctrl + G 提升标题 Ctrl + H 有序列表 Ctrl + O 无序列表 Ctrl + U 横线 Ctrl + R 撤销 Ctrl + Z 重做 Ctrl + Y 添加表格md编辑 ` | 水果 | 价格 | 数量 | | ——– | —–: | :—-: | | 香蕉 | $1 | 5 | | 苹果 | $1 | 6 | | 草莓 | $1 | 7 |` 大神插件 介绍：总有大佬想提高生产速度，就比如Fan Feilong的exceltk 下载：mac: &amp;&amp; windows: 使用： 把您想要转换的Excel文件命名为 example.xls并放在下载之后的文件夹内 打开win的Cmd写入如下命令行 exceltk.exe -t json -xls example.xls 即可食用 鸣谢大佬的辛苦，在此引用，请多包涵 食用中的问题 问题：Markdown pad 2居然不能显示表格？？？？ 解决办法：Tools 》》 Options 》》Markdown 》》Markdown Processor：Markdown（Extra） 使用 vscode写markdown遇到的问题 问题：Updata到服务器之后，文件中文有乱码？？ 解决办法：使用记事本打开》》另存为》》编码 》》UTF-8 》》再次Hexo g -d]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序学习笔记]]></title>
    <url>%2F2018%2F12%2F23%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[This is Mini Program AN]]></content>
      <tags>
        <tag>Mini Program</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Application Note]]></title>
    <url>%2F2018%2F12%2F22%2Fhexo%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[应用主题Tangdabao 下载你喜欢的主题 我下载的是Next 如何应用你喜欢的主题 在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码： $ cd your-hexo-site $ git clone https://github.com/iissnan/hexo-theme-next themes/next 使用中遇到的问题 中文乱码：VS打开Md文件导致，需要修改Vs中文格式]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
